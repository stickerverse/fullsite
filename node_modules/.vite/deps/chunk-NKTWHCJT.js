import {
  TSL
} from "./chunk-5FFPRNLG.js";

// node_modules/three/build/three.tsl.js
var BRDF_GGX = TSL.BRDF_GGX;
var BRDF_Lambert = TSL.BRDF_Lambert;
var BasicPointShadowFilter = TSL.BasicPointShadowFilter;
var BasicShadowFilter = TSL.BasicShadowFilter;
var Break = TSL.Break;
var Const = TSL.Const;
var Continue = TSL.Continue;
var DFGApprox = TSL.DFGApprox;
var D_GGX = TSL.D_GGX;
var Discard = TSL.Discard;
var EPSILON = TSL.EPSILON;
var F_Schlick = TSL.F_Schlick;
var Fn = TSL.Fn;
var INFINITY = TSL.INFINITY;
var If = TSL.If;
var Loop = TSL.Loop;
var NodeAccess = TSL.NodeAccess;
var NodeShaderStage = TSL.NodeShaderStage;
var NodeType = TSL.NodeType;
var NodeUpdateType = TSL.NodeUpdateType;
var PCFShadowFilter = TSL.PCFShadowFilter;
var PCFSoftShadowFilter = TSL.PCFSoftShadowFilter;
var PI = TSL.PI;
var PI2 = TSL.PI2;
var PointShadowFilter = TSL.PointShadowFilter;
var Return = TSL.Return;
var Schlick_to_F0 = TSL.Schlick_to_F0;
var ScriptableNodeResources = TSL.ScriptableNodeResources;
var ShaderNode = TSL.ShaderNode;
var Stack = TSL.Stack;
var Switch = TSL.Switch;
var TBNViewMatrix = TSL.TBNViewMatrix;
var VSMShadowFilter = TSL.VSMShadowFilter;
var V_GGX_SmithCorrelated = TSL.V_GGX_SmithCorrelated;
var Var = TSL.Var;
var VarIntent = TSL.VarIntent;
var abs = TSL.abs;
var acesFilmicToneMapping = TSL.acesFilmicToneMapping;
var acos = TSL.acos;
var add = TSL.add;
var addMethodChaining = TSL.addMethodChaining;
var addNodeElement = TSL.addNodeElement;
var agxToneMapping = TSL.agxToneMapping;
var all = TSL.all;
var alphaT = TSL.alphaT;
var and = TSL.and;
var anisotropy = TSL.anisotropy;
var anisotropyB = TSL.anisotropyB;
var anisotropyT = TSL.anisotropyT;
var any = TSL.any;
var append = TSL.append;
var array = TSL.array;
var arrayBuffer = TSL.arrayBuffer;
var asin = TSL.asin;
var assign = TSL.assign;
var atan = TSL.atan;
var atan2 = TSL.atan2;
var atomicAdd = TSL.atomicAdd;
var atomicAnd = TSL.atomicAnd;
var atomicFunc = TSL.atomicFunc;
var atomicLoad = TSL.atomicLoad;
var atomicMax = TSL.atomicMax;
var atomicMin = TSL.atomicMin;
var atomicOr = TSL.atomicOr;
var atomicStore = TSL.atomicStore;
var atomicSub = TSL.atomicSub;
var atomicXor = TSL.atomicXor;
var attenuationColor = TSL.attenuationColor;
var attenuationDistance = TSL.attenuationDistance;
var attribute = TSL.attribute;
var attributeArray = TSL.attributeArray;
var backgroundBlurriness = TSL.backgroundBlurriness;
var backgroundIntensity = TSL.backgroundIntensity;
var backgroundRotation = TSL.backgroundRotation;
var batch = TSL.batch;
var bentNormalView = TSL.bentNormalView;
var billboarding = TSL.billboarding;
var bitAnd = TSL.bitAnd;
var bitNot = TSL.bitNot;
var bitOr = TSL.bitOr;
var bitXor = TSL.bitXor;
var bitangentGeometry = TSL.bitangentGeometry;
var bitangentLocal = TSL.bitangentLocal;
var bitangentView = TSL.bitangentView;
var bitangentWorld = TSL.bitangentWorld;
var bitcast = TSL.bitcast;
var blendBurn = TSL.blendBurn;
var blendColor = TSL.blendColor;
var blendDodge = TSL.blendDodge;
var blendOverlay = TSL.blendOverlay;
var blendScreen = TSL.blendScreen;
var blur = TSL.blur;
var bool = TSL.bool;
var buffer = TSL.buffer;
var bufferAttribute = TSL.bufferAttribute;
var bumpMap = TSL.bumpMap;
var burn = TSL.burn;
var builtin = TSL.builtin;
var bvec2 = TSL.bvec2;
var bvec3 = TSL.bvec3;
var bvec4 = TSL.bvec4;
var bypass = TSL.bypass;
var cache = TSL.cache;
var call = TSL.call;
var cameraFar = TSL.cameraFar;
var cameraIndex = TSL.cameraIndex;
var cameraNear = TSL.cameraNear;
var cameraNormalMatrix = TSL.cameraNormalMatrix;
var cameraPosition = TSL.cameraPosition;
var cameraProjectionMatrix = TSL.cameraProjectionMatrix;
var cameraProjectionMatrixInverse = TSL.cameraProjectionMatrixInverse;
var cameraViewMatrix = TSL.cameraViewMatrix;
var cameraViewport = TSL.cameraViewport;
var cameraWorldMatrix = TSL.cameraWorldMatrix;
var cbrt = TSL.cbrt;
var cdl = TSL.cdl;
var ceil = TSL.ceil;
var checker = TSL.checker;
var cineonToneMapping = TSL.cineonToneMapping;
var clamp = TSL.clamp;
var clearcoat = TSL.clearcoat;
var clearcoatNormalView = TSL.clearcoatNormalView;
var clearcoatRoughness = TSL.clearcoatRoughness;
var code = TSL.code;
var color = TSL.color;
var colorSpaceToWorking = TSL.colorSpaceToWorking;
var colorToDirection = TSL.colorToDirection;
var compute = TSL.compute;
var computeKernel = TSL.computeKernel;
var computeSkinning = TSL.computeSkinning;
var context = TSL.context;
var convert = TSL.convert;
var convertColorSpace = TSL.convertColorSpace;
var convertToTexture = TSL.convertToTexture;
var cos = TSL.cos;
var cross = TSL.cross;
var cubeTexture = TSL.cubeTexture;
var cubeTextureBase = TSL.cubeTextureBase;
var cubeToUV = TSL.cubeToUV;
var dFdx = TSL.dFdx;
var dFdy = TSL.dFdy;
var dashSize = TSL.dashSize;
var debug = TSL.debug;
var decrement = TSL.decrement;
var decrementBefore = TSL.decrementBefore;
var defaultBuildStages = TSL.defaultBuildStages;
var defaultShaderStages = TSL.defaultShaderStages;
var defined = TSL.defined;
var degrees = TSL.degrees;
var deltaTime = TSL.deltaTime;
var densityFog = TSL.densityFog;
var densityFogFactor = TSL.densityFogFactor;
var depth = TSL.depth;
var depthPass = TSL.depthPass;
var determinant = TSL.determinant;
var difference = TSL.difference;
var diffuseColor = TSL.diffuseColor;
var directPointLight = TSL.directPointLight;
var directionToColor = TSL.directionToColor;
var directionToFaceDirection = TSL.directionToFaceDirection;
var dispersion = TSL.dispersion;
var distance = TSL.distance;
var div = TSL.div;
var dodge = TSL.dodge;
var dot = TSL.dot;
var drawIndex = TSL.drawIndex;
var dynamicBufferAttribute = TSL.dynamicBufferAttribute;
var element = TSL.element;
var emissive = TSL.emissive;
var equal = TSL.equal;
var equals = TSL.equals;
var equirectUV = TSL.equirectUV;
var exp = TSL.exp;
var exp2 = TSL.exp2;
var expression = TSL.expression;
var faceDirection = TSL.faceDirection;
var faceForward = TSL.faceForward;
var faceforward = TSL.faceforward;
var float = TSL.float;
var floatBitsToInt = TSL.floatBitsToInt;
var floatBitsToUint = TSL.floatBitsToUint;
var floor = TSL.floor;
var fog = TSL.fog;
var fract = TSL.fract;
var frameGroup = TSL.frameGroup;
var frameId = TSL.frameId;
var frontFacing = TSL.frontFacing;
var fwidth = TSL.fwidth;
var gain = TSL.gain;
var gapSize = TSL.gapSize;
var getConstNodeType = TSL.getConstNodeType;
var getCurrentStack = TSL.getCurrentStack;
var getDirection = TSL.getDirection;
var getDistanceAttenuation = TSL.getDistanceAttenuation;
var getGeometryRoughness = TSL.getGeometryRoughness;
var getNormalFromDepth = TSL.getNormalFromDepth;
var getParallaxCorrectNormal = TSL.getParallaxCorrectNormal;
var getRoughness = TSL.getRoughness;
var getScreenPosition = TSL.getScreenPosition;
var getShIrradianceAt = TSL.getShIrradianceAt;
var getShadowMaterial = TSL.getShadowMaterial;
var getShadowRenderObjectFunction = TSL.getShadowRenderObjectFunction;
var getTextureIndex = TSL.getTextureIndex;
var getViewPosition = TSL.getViewPosition;
var globalId = TSL.globalId;
var glsl = TSL.glsl;
var glslFn = TSL.glslFn;
var grayscale = TSL.grayscale;
var greaterThan = TSL.greaterThan;
var greaterThanEqual = TSL.greaterThanEqual;
var hash = TSL.hash;
var highpModelNormalViewMatrix = TSL.highpModelNormalViewMatrix;
var highpModelViewMatrix = TSL.highpModelViewMatrix;
var hue = TSL.hue;
var increment = TSL.increment;
var incrementBefore = TSL.incrementBefore;
var instance = TSL.instance;
var instanceIndex = TSL.instanceIndex;
var instancedArray = TSL.instancedArray;
var instancedBufferAttribute = TSL.instancedBufferAttribute;
var instancedDynamicBufferAttribute = TSL.instancedDynamicBufferAttribute;
var instancedMesh = TSL.instancedMesh;
var int = TSL.int;
var intBitsToFloat = TSL.intBitsToFloat;
var inverse = TSL.inverse;
var inverseSqrt = TSL.inverseSqrt;
var inversesqrt = TSL.inversesqrt;
var invocationLocalIndex = TSL.invocationLocalIndex;
var invocationSubgroupIndex = TSL.invocationSubgroupIndex;
var ior = TSL.ior;
var iridescence = TSL.iridescence;
var iridescenceIOR = TSL.iridescenceIOR;
var iridescenceThickness = TSL.iridescenceThickness;
var ivec2 = TSL.ivec2;
var ivec3 = TSL.ivec3;
var ivec4 = TSL.ivec4;
var js = TSL.js;
var label = TSL.label;
var length = TSL.length;
var lengthSq = TSL.lengthSq;
var lessThan = TSL.lessThan;
var lessThanEqual = TSL.lessThanEqual;
var lightPosition = TSL.lightPosition;
var lightProjectionUV = TSL.lightProjectionUV;
var lightShadowMatrix = TSL.lightShadowMatrix;
var lightTargetDirection = TSL.lightTargetDirection;
var lightTargetPosition = TSL.lightTargetPosition;
var lightViewPosition = TSL.lightViewPosition;
var lightingContext = TSL.lightingContext;
var lights = TSL.lights;
var linearDepth = TSL.linearDepth;
var linearToneMapping = TSL.linearToneMapping;
var localId = TSL.localId;
var log = TSL.log;
var log2 = TSL.log2;
var logarithmicDepthToViewZ = TSL.logarithmicDepthToViewZ;
var luminance = TSL.luminance;
var mat2 = TSL.mat2;
var mat3 = TSL.mat3;
var mat4 = TSL.mat4;
var matcapUV = TSL.matcapUV;
var materialAO = TSL.materialAO;
var materialAlphaTest = TSL.materialAlphaTest;
var materialAnisotropy = TSL.materialAnisotropy;
var materialAnisotropyVector = TSL.materialAnisotropyVector;
var materialAttenuationColor = TSL.materialAttenuationColor;
var materialAttenuationDistance = TSL.materialAttenuationDistance;
var materialClearcoat = TSL.materialClearcoat;
var materialClearcoatNormal = TSL.materialClearcoatNormal;
var materialClearcoatRoughness = TSL.materialClearcoatRoughness;
var materialColor = TSL.materialColor;
var materialDispersion = TSL.materialDispersion;
var materialEmissive = TSL.materialEmissive;
var materialEnvIntensity = TSL.materialEnvIntensity;
var materialEnvRotation = TSL.materialEnvRotation;
var materialIOR = TSL.materialIOR;
var materialIridescence = TSL.materialIridescence;
var materialIridescenceIOR = TSL.materialIridescenceIOR;
var materialIridescenceThickness = TSL.materialIridescenceThickness;
var materialLightMap = TSL.materialLightMap;
var materialLineDashOffset = TSL.materialLineDashOffset;
var materialLineDashSize = TSL.materialLineDashSize;
var materialLineGapSize = TSL.materialLineGapSize;
var materialLineScale = TSL.materialLineScale;
var materialLineWidth = TSL.materialLineWidth;
var materialMetalness = TSL.materialMetalness;
var materialNormal = TSL.materialNormal;
var materialOpacity = TSL.materialOpacity;
var materialPointSize = TSL.materialPointSize;
var materialReference = TSL.materialReference;
var materialReflectivity = TSL.materialReflectivity;
var materialRefractionRatio = TSL.materialRefractionRatio;
var materialRotation = TSL.materialRotation;
var materialRoughness = TSL.materialRoughness;
var materialSheen = TSL.materialSheen;
var materialSheenRoughness = TSL.materialSheenRoughness;
var materialShininess = TSL.materialShininess;
var materialSpecular = TSL.materialSpecular;
var materialSpecularColor = TSL.materialSpecularColor;
var materialSpecularIntensity = TSL.materialSpecularIntensity;
var materialSpecularStrength = TSL.materialSpecularStrength;
var materialThickness = TSL.materialThickness;
var materialTransmission = TSL.materialTransmission;
var max = TSL.max;
var maxMipLevel = TSL.maxMipLevel;
var mediumpModelViewMatrix = TSL.mediumpModelViewMatrix;
var metalness = TSL.metalness;
var min = TSL.min;
var mix = TSL.mix;
var mixElement = TSL.mixElement;
var mod = TSL.mod;
var modInt = TSL.modInt;
var modelDirection = TSL.modelDirection;
var modelNormalMatrix = TSL.modelNormalMatrix;
var modelPosition = TSL.modelPosition;
var modelRadius = TSL.modelRadius;
var modelScale = TSL.modelScale;
var modelViewMatrix = TSL.modelViewMatrix;
var modelViewPosition = TSL.modelViewPosition;
var modelViewProjection = TSL.modelViewProjection;
var modelWorldMatrix = TSL.modelWorldMatrix;
var modelWorldMatrixInverse = TSL.modelWorldMatrixInverse;
var morphReference = TSL.morphReference;
var mrt = TSL.mrt;
var mul = TSL.mul;
var mx_aastep = TSL.mx_aastep;
var mx_add = TSL.mx_add;
var mx_atan2 = TSL.mx_atan2;
var mx_cell_noise_float = TSL.mx_cell_noise_float;
var mx_contrast = TSL.mx_contrast;
var mx_divide = TSL.mx_divide;
var mx_fractal_noise_float = TSL.mx_fractal_noise_float;
var mx_fractal_noise_vec2 = TSL.mx_fractal_noise_vec2;
var mx_fractal_noise_vec3 = TSL.mx_fractal_noise_vec3;
var mx_fractal_noise_vec4 = TSL.mx_fractal_noise_vec4;
var mx_frame = TSL.mx_frame;
var mx_heighttonormal = TSL.mx_heighttonormal;
var mx_hsvtorgb = TSL.mx_hsvtorgb;
var mx_ifequal = TSL.mx_ifequal;
var mx_ifgreater = TSL.mx_ifgreater;
var mx_ifgreatereq = TSL.mx_ifgreatereq;
var mx_invert = TSL.mx_invert;
var mx_modulo = TSL.mx_modulo;
var mx_multiply = TSL.mx_multiply;
var mx_noise_float = TSL.mx_noise_float;
var mx_noise_vec3 = TSL.mx_noise_vec3;
var mx_noise_vec4 = TSL.mx_noise_vec4;
var mx_place2d = TSL.mx_place2d;
var mx_power = TSL.mx_power;
var mx_ramp4 = TSL.mx_ramp4;
var mx_ramplr = TSL.mx_ramplr;
var mx_ramptb = TSL.mx_ramptb;
var mx_rgbtohsv = TSL.mx_rgbtohsv;
var mx_rotate2d = TSL.mx_rotate2d;
var mx_rotate3d = TSL.mx_rotate3d;
var mx_safepower = TSL.mx_safepower;
var mx_separate = TSL.mx_separate;
var mx_splitlr = TSL.mx_splitlr;
var mx_splittb = TSL.mx_splittb;
var mx_srgb_texture_to_lin_rec709 = TSL.mx_srgb_texture_to_lin_rec709;
var mx_subtract = TSL.mx_subtract;
var mx_timer = TSL.mx_timer;
var mx_transform_uv = TSL.mx_transform_uv;
var mx_unifiednoise2d = TSL.mx_unifiednoise2d;
var mx_unifiednoise3d = TSL.mx_unifiednoise3d;
var mx_worley_noise_float = TSL.mx_worley_noise_float;
var mx_worley_noise_vec2 = TSL.mx_worley_noise_vec2;
var mx_worley_noise_vec3 = TSL.mx_worley_noise_vec3;
var negate = TSL.negate;
var neutralToneMapping = TSL.neutralToneMapping;
var nodeArray = TSL.nodeArray;
var nodeImmutable = TSL.nodeImmutable;
var nodeObject = TSL.nodeObject;
var nodeObjectIntent = TSL.nodeObjectIntent;
var nodeObjects = TSL.nodeObjects;
var nodeProxy = TSL.nodeProxy;
var nodeProxyIntent = TSL.nodeProxyIntent;
var normalFlat = TSL.normalFlat;
var normalGeometry = TSL.normalGeometry;
var normalLocal = TSL.normalLocal;
var normalMap = TSL.normalMap;
var normalView = TSL.normalView;
var normalViewGeometry = TSL.normalViewGeometry;
var normalWorld = TSL.normalWorld;
var normalWorldGeometry = TSL.normalWorldGeometry;
var normalize = TSL.normalize;
var not = TSL.not;
var notEqual = TSL.notEqual;
var numWorkgroups = TSL.numWorkgroups;
var objectDirection = TSL.objectDirection;
var objectGroup = TSL.objectGroup;
var objectPosition = TSL.objectPosition;
var objectRadius = TSL.objectRadius;
var objectScale = TSL.objectScale;
var objectViewPosition = TSL.objectViewPosition;
var objectWorldMatrix = TSL.objectWorldMatrix;
var OnObjectUpdate = TSL.OnObjectUpdate;
var OnMaterialUpdate = TSL.OnMaterialUpdate;
var oneMinus = TSL.oneMinus;
var or = TSL.or;
var orthographicDepthToViewZ = TSL.orthographicDepthToViewZ;
var oscSawtooth = TSL.oscSawtooth;
var oscSine = TSL.oscSine;
var oscSquare = TSL.oscSquare;
var oscTriangle = TSL.oscTriangle;
var output = TSL.output;
var outputStruct = TSL.outputStruct;
var overlay = TSL.overlay;
var overloadingFn = TSL.overloadingFn;
var parabola = TSL.parabola;
var parallaxDirection = TSL.parallaxDirection;
var parallaxUV = TSL.parallaxUV;
var parameter = TSL.parameter;
var pass = TSL.pass;
var passTexture = TSL.passTexture;
var pcurve = TSL.pcurve;
var perspectiveDepthToViewZ = TSL.perspectiveDepthToViewZ;
var pmremTexture = TSL.pmremTexture;
var pointShadow = TSL.pointShadow;
var pointUV = TSL.pointUV;
var pointWidth = TSL.pointWidth;
var positionGeometry = TSL.positionGeometry;
var positionLocal = TSL.positionLocal;
var positionPrevious = TSL.positionPrevious;
var positionView = TSL.positionView;
var positionViewDirection = TSL.positionViewDirection;
var positionWorld = TSL.positionWorld;
var positionWorldDirection = TSL.positionWorldDirection;
var posterize = TSL.posterize;
var pow = TSL.pow;
var pow2 = TSL.pow2;
var pow3 = TSL.pow3;
var pow4 = TSL.pow4;
var premultiplyAlpha = TSL.premultiplyAlpha;
var property = TSL.property;
var radians = TSL.radians;
var rand = TSL.rand;
var range = TSL.range;
var rangeFog = TSL.rangeFog;
var rangeFogFactor = TSL.rangeFogFactor;
var reciprocal = TSL.reciprocal;
var reference = TSL.reference;
var referenceBuffer = TSL.referenceBuffer;
var reflect = TSL.reflect;
var reflectVector = TSL.reflectVector;
var reflectView = TSL.reflectView;
var reflector = TSL.reflector;
var refract = TSL.refract;
var refractVector = TSL.refractVector;
var refractView = TSL.refractView;
var reinhardToneMapping = TSL.reinhardToneMapping;
var remap = TSL.remap;
var remapClamp = TSL.remapClamp;
var renderGroup = TSL.renderGroup;
var renderOutput = TSL.renderOutput;
var rendererReference = TSL.rendererReference;
var rotate = TSL.rotate;
var rotateUV = TSL.rotateUV;
var roughness = TSL.roughness;
var round = TSL.round;
var rtt = TSL.rtt;
var sRGBTransferEOTF = TSL.sRGBTransferEOTF;
var sRGBTransferOETF = TSL.sRGBTransferOETF;
var sample = TSL.sample;
var sampler = TSL.sampler;
var samplerComparison = TSL.samplerComparison;
var saturate = TSL.saturate;
var saturation = TSL.saturation;
var screen = TSL.screen;
var screenCoordinate = TSL.screenCoordinate;
var screenDPR = TSL.screenDPR;
var screenSize = TSL.screenSize;
var screenUV = TSL.screenUV;
var scriptable = TSL.scriptable;
var scriptableValue = TSL.scriptableValue;
var select = TSL.select;
var setCurrentStack = TSL.setCurrentStack;
var setName = TSL.setName;
var shaderStages = TSL.shaderStages;
var shadow = TSL.shadow;
var shadowPositionWorld = TSL.shadowPositionWorld;
var shapeCircle = TSL.shapeCircle;
var sharedUniformGroup = TSL.sharedUniformGroup;
var sheen = TSL.sheen;
var sheenRoughness = TSL.sheenRoughness;
var shiftLeft = TSL.shiftLeft;
var shiftRight = TSL.shiftRight;
var shininess = TSL.shininess;
var sign = TSL.sign;
var sin = TSL.sin;
var sinc = TSL.sinc;
var skinning = TSL.skinning;
var smoothstep = TSL.smoothstep;
var smoothstepElement = TSL.smoothstepElement;
var specularColor = TSL.specularColor;
var specularF90 = TSL.specularF90;
var spherizeUV = TSL.spherizeUV;
var split = TSL.split;
var spritesheetUV = TSL.spritesheetUV;
var sqrt = TSL.sqrt;
var stack = TSL.stack;
var step = TSL.step;
var stepElement = TSL.stepElement;
var storage = TSL.storage;
var storageBarrier = TSL.storageBarrier;
var storageObject = TSL.storageObject;
var storageTexture = TSL.storageTexture;
var string = TSL.string;
var struct = TSL.struct;
var sub = TSL.sub;
var subgroupAdd = TSL.subgroupAdd;
var subgroupAll = TSL.subgroupAll;
var subgroupAnd = TSL.subgroupAnd;
var subgroupAny = TSL.subgroupAny;
var subgroupBallot = TSL.subgroupBallot;
var subgroupBroadcast = TSL.subgroupBroadcast;
var subgroupBroadcastFirst = TSL.subgroupBroadcastFirst;
var subBuild = TSL.subBuild;
var subgroupElect = TSL.subgroupElect;
var subgroupExclusiveAdd = TSL.subgroupExclusiveAdd;
var subgroupExclusiveMul = TSL.subgroupExclusiveMul;
var subgroupInclusiveAdd = TSL.subgroupInclusiveAdd;
var subgroupInclusiveMul = TSL.subgroupInclusiveMul;
var subgroupIndex = TSL.subgroupIndex;
var subgroupMax = TSL.subgroupMax;
var subgroupMin = TSL.subgroupMin;
var subgroupMul = TSL.subgroupMul;
var subgroupOr = TSL.subgroupOr;
var subgroupShuffle = TSL.subgroupShuffle;
var subgroupShuffleDown = TSL.subgroupShuffleDown;
var subgroupShuffleUp = TSL.subgroupShuffleUp;
var subgroupShuffleXor = TSL.subgroupShuffleXor;
var subgroupSize = TSL.subgroupSize;
var subgroupXor = TSL.subgroupXor;
var tan = TSL.tan;
var tangentGeometry = TSL.tangentGeometry;
var tangentLocal = TSL.tangentLocal;
var tangentView = TSL.tangentView;
var tangentWorld = TSL.tangentWorld;
var texture = TSL.texture;
var texture3D = TSL.texture3D;
var textureBarrier = TSL.textureBarrier;
var textureBicubic = TSL.textureBicubic;
var textureBicubicLevel = TSL.textureBicubicLevel;
var textureCubeUV = TSL.textureCubeUV;
var textureLoad = TSL.textureLoad;
var textureSize = TSL.textureSize;
var textureStore = TSL.textureStore;
var thickness = TSL.thickness;
var time = TSL.time;
var toneMapping = TSL.toneMapping;
var toneMappingExposure = TSL.toneMappingExposure;
var toonOutlinePass = TSL.toonOutlinePass;
var transformDirection = TSL.transformDirection;
var transformNormal = TSL.transformNormal;
var transformNormalToView = TSL.transformNormalToView;
var transformedClearcoatNormalView = TSL.transformedClearcoatNormalView;
var transformedNormalView = TSL.transformedNormalView;
var transformedNormalWorld = TSL.transformedNormalWorld;
var transmission = TSL.transmission;
var transpose = TSL.transpose;
var triNoise3D = TSL.triNoise3D;
var triplanarTexture = TSL.triplanarTexture;
var triplanarTextures = TSL.triplanarTextures;
var trunc = TSL.trunc;
var uint = TSL.uint;
var uintBitsToFloat = TSL.uintBitsToFloat;
var uniform = TSL.uniform;
var uniformArray = TSL.uniformArray;
var uniformCubeTexture = TSL.uniformCubeTexture;
var uniformGroup = TSL.uniformGroup;
var uniformFlow = TSL.uniformFlow;
var uniformTexture = TSL.uniformTexture;
var unpremultiplyAlpha = TSL.unpremultiplyAlpha;
var userData = TSL.userData;
var uv = TSL.uv;
var uvec2 = TSL.uvec2;
var uvec3 = TSL.uvec3;
var uvec4 = TSL.uvec4;
var varying = TSL.varying;
var varyingProperty = TSL.varyingProperty;
var vec2 = TSL.vec2;
var vec3 = TSL.vec3;
var vec4 = TSL.vec4;
var vectorComponents = TSL.vectorComponents;
var velocity = TSL.velocity;
var vertexColor = TSL.vertexColor;
var vertexIndex = TSL.vertexIndex;
var vertexStage = TSL.vertexStage;
var vibrance = TSL.vibrance;
var viewZToLogarithmicDepth = TSL.viewZToLogarithmicDepth;
var viewZToOrthographicDepth = TSL.viewZToOrthographicDepth;
var viewZToPerspectiveDepth = TSL.viewZToPerspectiveDepth;
var viewport = TSL.viewport;
var viewportCoordinate = TSL.viewportCoordinate;
var viewportDepthTexture = TSL.viewportDepthTexture;
var viewportLinearDepth = TSL.viewportLinearDepth;
var viewportMipTexture = TSL.viewportMipTexture;
var viewportResolution = TSL.viewportResolution;
var viewportSafeUV = TSL.viewportSafeUV;
var viewportSharedTexture = TSL.viewportSharedTexture;
var viewportSize = TSL.viewportSize;
var viewportTexture = TSL.viewportTexture;
var viewportUV = TSL.viewportUV;
var wgsl = TSL.wgsl;
var wgslFn = TSL.wgslFn;
var workgroupArray = TSL.workgroupArray;
var workgroupBarrier = TSL.workgroupBarrier;
var workgroupId = TSL.workgroupId;
var workingToColorSpace = TSL.workingToColorSpace;
var xor = TSL.xor;

export {
  BRDF_GGX,
  BRDF_Lambert,
  BasicPointShadowFilter,
  BasicShadowFilter,
  Break,
  Const,
  Continue,
  DFGApprox,
  D_GGX,
  Discard,
  EPSILON,
  F_Schlick,
  Fn,
  INFINITY,
  If,
  Loop,
  NodeAccess,
  NodeShaderStage,
  NodeType,
  NodeUpdateType,
  PCFShadowFilter,
  PCFSoftShadowFilter,
  PI,
  PI2,
  PointShadowFilter,
  Return,
  Schlick_to_F0,
  ScriptableNodeResources,
  ShaderNode,
  Stack,
  Switch,
  TBNViewMatrix,
  VSMShadowFilter,
  V_GGX_SmithCorrelated,
  Var,
  VarIntent,
  abs,
  acesFilmicToneMapping,
  acos,
  add,
  addMethodChaining,
  addNodeElement,
  agxToneMapping,
  all,
  alphaT,
  and,
  anisotropy,
  anisotropyB,
  anisotropyT,
  any,
  append,
  array,
  arrayBuffer,
  asin,
  assign,
  atan,
  atan2,
  atomicAdd,
  atomicAnd,
  atomicFunc,
  atomicLoad,
  atomicMax,
  atomicMin,
  atomicOr,
  atomicStore,
  atomicSub,
  atomicXor,
  attenuationColor,
  attenuationDistance,
  attribute,
  attributeArray,
  backgroundBlurriness,
  backgroundIntensity,
  backgroundRotation,
  batch,
  bentNormalView,
  billboarding,
  bitAnd,
  bitNot,
  bitOr,
  bitXor,
  bitangentGeometry,
  bitangentLocal,
  bitangentView,
  bitangentWorld,
  bitcast,
  blendBurn,
  blendColor,
  blendDodge,
  blendOverlay,
  blendScreen,
  blur,
  bool,
  buffer,
  bufferAttribute,
  bumpMap,
  burn,
  builtin,
  bvec2,
  bvec3,
  bvec4,
  bypass,
  cache,
  call,
  cameraFar,
  cameraIndex,
  cameraNear,
  cameraNormalMatrix,
  cameraPosition,
  cameraProjectionMatrix,
  cameraProjectionMatrixInverse,
  cameraViewMatrix,
  cameraViewport,
  cameraWorldMatrix,
  cbrt,
  cdl,
  ceil,
  checker,
  cineonToneMapping,
  clamp,
  clearcoat,
  clearcoatNormalView,
  clearcoatRoughness,
  code,
  color,
  colorSpaceToWorking,
  colorToDirection,
  compute,
  computeKernel,
  computeSkinning,
  context,
  convert,
  convertColorSpace,
  convertToTexture,
  cos,
  cross,
  cubeTexture,
  cubeTextureBase,
  cubeToUV,
  dFdx,
  dFdy,
  dashSize,
  debug,
  decrement,
  decrementBefore,
  defaultBuildStages,
  defaultShaderStages,
  defined,
  degrees,
  deltaTime,
  densityFog,
  densityFogFactor,
  depth,
  depthPass,
  determinant,
  difference,
  diffuseColor,
  directPointLight,
  directionToColor,
  directionToFaceDirection,
  dispersion,
  distance,
  div,
  dodge,
  dot,
  drawIndex,
  dynamicBufferAttribute,
  element,
  emissive,
  equal,
  equals,
  equirectUV,
  exp,
  exp2,
  expression,
  faceDirection,
  faceForward,
  faceforward,
  float,
  floatBitsToInt,
  floatBitsToUint,
  floor,
  fog,
  fract,
  frameGroup,
  frameId,
  frontFacing,
  fwidth,
  gain,
  gapSize,
  getConstNodeType,
  getCurrentStack,
  getDirection,
  getDistanceAttenuation,
  getGeometryRoughness,
  getNormalFromDepth,
  getParallaxCorrectNormal,
  getRoughness,
  getScreenPosition,
  getShIrradianceAt,
  getShadowMaterial,
  getShadowRenderObjectFunction,
  getTextureIndex,
  getViewPosition,
  globalId,
  glsl,
  glslFn,
  grayscale,
  greaterThan,
  greaterThanEqual,
  hash,
  highpModelNormalViewMatrix,
  highpModelViewMatrix,
  hue,
  increment,
  incrementBefore,
  instance,
  instanceIndex,
  instancedArray,
  instancedBufferAttribute,
  instancedDynamicBufferAttribute,
  instancedMesh,
  int,
  intBitsToFloat,
  inverse,
  inverseSqrt,
  inversesqrt,
  invocationLocalIndex,
  invocationSubgroupIndex,
  ior,
  iridescence,
  iridescenceIOR,
  iridescenceThickness,
  ivec2,
  ivec3,
  ivec4,
  js,
  label,
  length,
  lengthSq,
  lessThan,
  lessThanEqual,
  lightPosition,
  lightProjectionUV,
  lightShadowMatrix,
  lightTargetDirection,
  lightTargetPosition,
  lightViewPosition,
  lightingContext,
  lights,
  linearDepth,
  linearToneMapping,
  localId,
  log,
  log2,
  logarithmicDepthToViewZ,
  luminance,
  mat2,
  mat3,
  mat4,
  matcapUV,
  materialAO,
  materialAlphaTest,
  materialAnisotropy,
  materialAnisotropyVector,
  materialAttenuationColor,
  materialAttenuationDistance,
  materialClearcoat,
  materialClearcoatNormal,
  materialClearcoatRoughness,
  materialColor,
  materialDispersion,
  materialEmissive,
  materialEnvIntensity,
  materialEnvRotation,
  materialIOR,
  materialIridescence,
  materialIridescenceIOR,
  materialIridescenceThickness,
  materialLightMap,
  materialLineDashOffset,
  materialLineDashSize,
  materialLineGapSize,
  materialLineScale,
  materialLineWidth,
  materialMetalness,
  materialNormal,
  materialOpacity,
  materialPointSize,
  materialReference,
  materialReflectivity,
  materialRefractionRatio,
  materialRotation,
  materialRoughness,
  materialSheen,
  materialSheenRoughness,
  materialShininess,
  materialSpecular,
  materialSpecularColor,
  materialSpecularIntensity,
  materialSpecularStrength,
  materialThickness,
  materialTransmission,
  max,
  maxMipLevel,
  mediumpModelViewMatrix,
  metalness,
  min,
  mix,
  mixElement,
  mod,
  modInt,
  modelDirection,
  modelNormalMatrix,
  modelPosition,
  modelRadius,
  modelScale,
  modelViewMatrix,
  modelViewPosition,
  modelViewProjection,
  modelWorldMatrix,
  modelWorldMatrixInverse,
  morphReference,
  mrt,
  mul,
  mx_aastep,
  mx_add,
  mx_atan2,
  mx_cell_noise_float,
  mx_contrast,
  mx_divide,
  mx_fractal_noise_float,
  mx_fractal_noise_vec2,
  mx_fractal_noise_vec3,
  mx_fractal_noise_vec4,
  mx_frame,
  mx_heighttonormal,
  mx_hsvtorgb,
  mx_ifequal,
  mx_ifgreater,
  mx_ifgreatereq,
  mx_invert,
  mx_modulo,
  mx_multiply,
  mx_noise_float,
  mx_noise_vec3,
  mx_noise_vec4,
  mx_place2d,
  mx_power,
  mx_ramp4,
  mx_ramplr,
  mx_ramptb,
  mx_rgbtohsv,
  mx_rotate2d,
  mx_rotate3d,
  mx_safepower,
  mx_separate,
  mx_splitlr,
  mx_splittb,
  mx_srgb_texture_to_lin_rec709,
  mx_subtract,
  mx_timer,
  mx_transform_uv,
  mx_unifiednoise2d,
  mx_unifiednoise3d,
  mx_worley_noise_float,
  mx_worley_noise_vec2,
  mx_worley_noise_vec3,
  negate,
  neutralToneMapping,
  nodeArray,
  nodeImmutable,
  nodeObject,
  nodeObjectIntent,
  nodeObjects,
  nodeProxy,
  nodeProxyIntent,
  normalFlat,
  normalGeometry,
  normalLocal,
  normalMap,
  normalView,
  normalViewGeometry,
  normalWorld,
  normalWorldGeometry,
  normalize,
  not,
  notEqual,
  numWorkgroups,
  objectDirection,
  objectGroup,
  objectPosition,
  objectRadius,
  objectScale,
  objectViewPosition,
  objectWorldMatrix,
  OnObjectUpdate,
  OnMaterialUpdate,
  oneMinus,
  or,
  orthographicDepthToViewZ,
  oscSawtooth,
  oscSine,
  oscSquare,
  oscTriangle,
  output,
  outputStruct,
  overlay,
  overloadingFn,
  parabola,
  parallaxDirection,
  parallaxUV,
  parameter,
  pass,
  passTexture,
  pcurve,
  perspectiveDepthToViewZ,
  pmremTexture,
  pointShadow,
  pointUV,
  pointWidth,
  positionGeometry,
  positionLocal,
  positionPrevious,
  positionView,
  positionViewDirection,
  positionWorld,
  positionWorldDirection,
  posterize,
  pow,
  pow2,
  pow3,
  pow4,
  premultiplyAlpha,
  property,
  radians,
  rand,
  range,
  rangeFog,
  rangeFogFactor,
  reciprocal,
  reference,
  referenceBuffer,
  reflect,
  reflectVector,
  reflectView,
  reflector,
  refract,
  refractVector,
  refractView,
  reinhardToneMapping,
  remap,
  remapClamp,
  renderGroup,
  renderOutput,
  rendererReference,
  rotate,
  rotateUV,
  roughness,
  round,
  rtt,
  sRGBTransferEOTF,
  sRGBTransferOETF,
  sample,
  sampler,
  samplerComparison,
  saturate,
  saturation,
  screen,
  screenCoordinate,
  screenDPR,
  screenSize,
  screenUV,
  scriptable,
  scriptableValue,
  select,
  setCurrentStack,
  setName,
  shaderStages,
  shadow,
  shadowPositionWorld,
  shapeCircle,
  sharedUniformGroup,
  sheen,
  sheenRoughness,
  shiftLeft,
  shiftRight,
  shininess,
  sign,
  sin,
  sinc,
  skinning,
  smoothstep,
  smoothstepElement,
  specularColor,
  specularF90,
  spherizeUV,
  split,
  spritesheetUV,
  sqrt,
  stack,
  step,
  stepElement,
  storage,
  storageBarrier,
  storageObject,
  storageTexture,
  string,
  struct,
  sub,
  subgroupAdd,
  subgroupAll,
  subgroupAnd,
  subgroupAny,
  subgroupBallot,
  subgroupBroadcast,
  subgroupBroadcastFirst,
  subBuild,
  subgroupElect,
  subgroupExclusiveAdd,
  subgroupExclusiveMul,
  subgroupInclusiveAdd,
  subgroupInclusiveMul,
  subgroupIndex,
  subgroupMax,
  subgroupMin,
  subgroupMul,
  subgroupOr,
  subgroupShuffle,
  subgroupShuffleDown,
  subgroupShuffleUp,
  subgroupShuffleXor,
  subgroupSize,
  subgroupXor,
  tan,
  tangentGeometry,
  tangentLocal,
  tangentView,
  tangentWorld,
  texture,
  texture3D,
  textureBarrier,
  textureBicubic,
  textureBicubicLevel,
  textureCubeUV,
  textureLoad,
  textureSize,
  textureStore,
  thickness,
  time,
  toneMapping,
  toneMappingExposure,
  toonOutlinePass,
  transformDirection,
  transformNormal,
  transformNormalToView,
  transformedClearcoatNormalView,
  transformedNormalView,
  transformedNormalWorld,
  transmission,
  transpose,
  triNoise3D,
  triplanarTexture,
  triplanarTextures,
  trunc,
  uint,
  uintBitsToFloat,
  uniform,
  uniformArray,
  uniformCubeTexture,
  uniformGroup,
  uniformFlow,
  uniformTexture,
  unpremultiplyAlpha,
  userData,
  uv,
  uvec2,
  uvec3,
  uvec4,
  varying,
  varyingProperty,
  vec2,
  vec3,
  vec4,
  vectorComponents,
  velocity,
  vertexColor,
  vertexIndex,
  vertexStage,
  vibrance,
  viewZToLogarithmicDepth,
  viewZToOrthographicDepth,
  viewZToPerspectiveDepth,
  viewport,
  viewportCoordinate,
  viewportDepthTexture,
  viewportLinearDepth,
  viewportMipTexture,
  viewportResolution,
  viewportSafeUV,
  viewportSharedTexture,
  viewportSize,
  viewportTexture,
  viewportUV,
  wgsl,
  wgslFn,
  workgroupArray,
  workgroupBarrier,
  workgroupId,
  workingToColorSpace,
  xor
};
/*! Bundled license information:

three/build/three.tsl.js:
  (**
   * @license
   * Copyright 2010-2025 Three.js Authors
   * SPDX-License-Identifier: MIT
   *)
*/
//# sourceMappingURL=chunk-NKTWHCJT.js.map
