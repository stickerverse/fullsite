'use client';
import { useState, useRef, useEffect } from 'react';

function getScrollPosition() {
  return typeof window !== "undefined" ? { x: window.scrollX, y: window.scrollY } : { x: 0, y: 0 };
}
function scrollTo({ x, y }) {
  if (typeof window !== "undefined") {
    const scrollOptions = { behavior: "smooth" };
    if (typeof x === "number") {
      scrollOptions.left = x;
    }
    if (typeof y === "number") {
      scrollOptions.top = y;
    }
    window.scrollTo(scrollOptions);
  }
}
function useWindowScroll() {
  const [position, setPosition] = useState({ x: 0, y: 0 });
  const ticking = useRef(false);
  useEffect(() => {
    let rafID = null;
    function updatePosition() {
      if (!ticking.current) {
        ticking.current = true;
        rafID = window.requestAnimationFrame(() => {
          setPosition(getScrollPosition());
          ticking.current = false;
        });
      }
    }
    window.addEventListener("scroll", updatePosition);
    window.addEventListener("resize", updatePosition);
    return () => {
      window.removeEventListener("scroll", updatePosition);
      window.removeEventListener("resize", updatePosition);
      if (rafID) {
        window.cancelAnimationFrame(rafID);
      }
    };
  }, []);
  useEffect(() => {
    setPosition(getScrollPosition());
  }, []);
  return [position, scrollTo];
}

export { useWindowScroll };
//# sourceMappingURL=use-window-scroll.mjs.map
